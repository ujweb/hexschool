.container {
	position: relative;
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	padding-left: $gutter-width / 2;
	padding-right: $gutter-width / 2;
	@media screen and (min-width: 1024px) {
		max-width: 920px;
	}
	@media screen and (min-width: 1200px) {
		max-width: 1140px;
	}
}

.container-fluid {
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	padding-left: $gutter-width / 2;
	padding-right: $gutter-width / 2;
}
  
.row {
	display: flex;
	flex-wrap: wrap;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
	margin-left: -($gutter-width / 2);
	margin-right: -($gutter-width / 2);
}

.no-gutter {
	margin-left: 0px;
	margin-right: 0px;

	> [class*="col-"] {
		padding-left: 0px;
		padding-right: 0px;
	}
}

%col {
	position: relative;
	width: 100%;
	padding-left: $gutter-width / 2;
	padding-right: $gutter-width / 2;
}

@each $key, $value in $grid-breakpoints {
	@for $var from 1 through $grid-sum {
		@if not $value {
			.col-#{$var} {
				@extend %col;
			}
		} @else {
			.col-#{$key}-#{$var} {
				@extend %col;
			}
		}
	}
}

@mixin generate($pro, $side, $spacValue) {
	@if $side == "" {
		@if $pro == "m" {
			margin: $spacValue;
		}
		@if $pro == "p" {
			padding: $spacValue;
		}
	}
	@if $side == "t" {
		@if $pro == "m" {
			margin-top: $spacValue;
		}
		@if $pro == "p" {
			padding-top: $spacValue;
		}
	}
	@if $side == "b" {
		@if $pro == "m" {
			margin-bottom: $spacValue;
		}
		@if $pro == "p" {
			padding-bottom: $spacValue;
		}
	}
	@if $side == "l" {
		@if $pro == "m" {
			margin-left: $spacValue;
		}
		@if $pro == "p" {
			padding-left: $spacValue;
		}
	}
	@if $side == "r" {
		@if $pro == "m" {
			margin-right: $spacValue;
		}
		@if $pro == "p" {
			padding-right: $spacValue;
		}
	}
	@if $side == "x" {
		@if $pro == "m" {
			margin-left: $spacValue;
			margin-right: $spacValue;
		}
		@if $pro == "p" {
			padding-left: $spacValue;
			padding-right: $spacValue;
		}
	}
	@if $side == "y" {
		@if $pro == "m" {
			margin-top: $spacValue;
			margin-bottom: $spacValue;
		}
		@if $pro == "p" {
			padding-top: $spacValue;
			padding-bottom: $spacValue;
		}
	}
}

@each $key, $value in $grid-breakpoints {
	@if not $value {
		@for $var from 1 to ($grid-sum+1) {
			.col-#{$var} {
				max-width: 100% * ($var / $grid-sum);
				flex: 0 0 (100% * ($var / $grid-sum));
			}
		}
		@each $pro in $property {
			@each $side in $sides {
				@each $spacKey, $spacValue in $spacies {
					.#{$pro}#{$side}-#{$spacKey} {
						@include generate($pro, $side, $spacValue !important);
					}
				}
			}
		}
		@each $align in $aligns {
			.text-#{$align} {
				text-align: #{$align};
			}
		}
		@each $display in $displays {
			.d-#{$display} {
				display: #{$display};
			}
		}
		@each $weight in $weights {
			.font-weight-#{$weight} {
				font-weight: #{$weight};
			}
		}
	} @else {
		@media screen and (min-width: $value) {
			@for $var from 1 to ($grid-sum+1) {
				.col-#{$key}-#{$var} {
					max-width: 100% * ($var / $grid-sum);
					flex: 0 0 (100% * ($var / $grid-sum));
				}
			}
			@each $pro in $property {
				@each $side in $sides {
					@each $spacKey, $spacValue in $spacies {
						.#{$pro}#{$side}-#{$key}-#{$spacKey} {
							@include generate($pro, $side, $spacValue !important);
						}
					}
				}
			}
			@each $align in $aligns {
				.text-#{$key}-#{$align} {
					text-align: #{$align};
				}
			}
			@each $display in $displays {
				.d-#{$key}-#{$display} {
					display: #{$display};
				}
			}
			@each $weight in $weights {
				.font-weight-#{$key}-#{$weight} {
					font-weight: #{$weight};
				}
			}
		}
	}
}
